//
//Сгенерировано c1ExchangeGen
// -----------------------------
//


Функция СтрСплит(Стр, Разд) Экспорт
	Рез = Новый Массив;
	Ост = Стр;
	Пока Ост <> "" Цикл
		ПР = Найти(Ост, Разд);
		Если ПР = 0 Тогда
			Рез.Добавить(Ост);
			Ост = "";
		Иначе
			Нк = Лев(Ост, ПР-1);
			Рез.Добавить(Нк);
			Ост = Прав(Ост, СтрДлина(Ост) - (ПР + СтрДлина(Разд) - 1));
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция _ПрЗнч(Значен) Экспорт
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значен))Или Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значен)) Тогда
		Возврат СериализоватьСсылку(Значен);
	Иначе
		Возврат Формат(Значен, "ЧРД=.; ЧРГ=' '; ЧГ=0; ДФ=yyyyMMddHHmmss; БЛ=Ложь; БИ=Истина");
	КонецЕсли;
КонецФункции

Функция СериализоватьСсылку(СсылкаЗнч) Экспорт
	Попытка
		Если Найти(Строка(ТипЗнч(СсылкаЗнч)), "Перечисление.") <> 0 Тогда
			Возврат "~~~@REF:" + Строка(СсылкаЗнч.Метаданные().ПолноеИмя());
		ИначеЕсли Найти(Строка(ТипЗнч(СсылкаЗнч)) ,"Документ табличная часть строка") <> 0 Тогда
			Возврат "~~~@REF:" + "СтрокаТЧ" + "/" + Строка(СсылкаЗнч);
		ИначеЕсли Найти(Строка(ТипЗнч(СсылкаЗнч)), "Справочник табличная часть строка") <> 0 Тогда
			Возврат "~~~@REF:" + "СтрокаТЧ" + "/" + Строка(СсылкаЗнч);
		Иначе
			Возврат "~~~@REF:" + Строка(СсылкаЗнч.Метаданные().ПолноеИмя()) + "/" + Строка(СсылкаЗнч.УникальныйИдентификатор());
		КонецЕсли;
	Исключение
		Сообщить("Ошибка сериализации ссылки, " + Строка(СсылкаЗнч) + " " + Строка(ТипЗнч(СсылкаЗнч)));
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции

Функция ДесереализоватьСсылку(Стрк) Экспорт
	Чст = СтрСплит(Стрк, "@REF:");
	Если Чст.Количество() = 2 Тогда
		Если Чст[0] = "~~~" Тогда
			Пр = СтрСплит(Чст[1], "/");
			Имена = СтрСплит(Пр[0], ".");
			Если Имена[0] = "Справочник" Тогда
				Возврат Справочники[Имена[1]].ПолучитьСсылку(Новый УникальныйИдентификатор(Пр[1]));
			КонецЕсли;
			Если Имена[0] = "Документ" Тогда
				Возврат Документы[Имена[1]].ПолучитьСсылку(Новый УникальныйИдентификатор(Пр[1]));
			КонецЕсли;
			Если Имена[0] = "Перечисление" Тогда
				Для Каждого ПерЗн Из Перечисления[Имена[1]] Цикл
					Если ПерЗн.Метаданные().Имя = Пр[1] Тогда
						Возврат ПерЗн;
					КонецЕсли;
				КонецЦикла;
				Возврат Перечисления[Имена[1]].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СериализоватьМассивСтруктур(ЗаписьJSON, Мас)
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого Эл Из Мас Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		#Если Клиент Тогда
			Сообщить("json_export " + Строка(Эл._Ссылка));
		#КонецЕсли
		Для Каждого ЭлСтр Из Эл Цикл
			#Если Клиент Тогда
				Сообщить("json_export_field " + Строка(ЭлСтр.Ключ) + " = " + Строка(ЭлСтр.Значение));
			#КонецЕсли
			ЗаписьJSON.ЗаписатьИмяСвойства(ЭлСтр.Ключ);
			ЗаписьJSON.ЗаписатьЗначение(_ПрЗнч(ЭлСтр.Значение));
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
КонецФункции

Функция ДесереализоватьМассивСтруктур(ЧтениеJSON) Экспорт
	_ММ = Новый Массив;
	Структ = Неопределено;
	ИмяСв = "";
	Пока ЧтениеJSON.Прочитать() Цикл
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			Структ = Новый Структура;
		КонецЕсли;
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			#Если Клиент Тогда
				Сообщить("json_import " + Структ._Ссылка);
			#КонецЕсли
			Структ._Ссылка = ДесереализоватьСсылку(Структ._Ссылка);
			_ММ.Добавить(Структ);
		КонецЕсли;
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСв = ЧтениеJSON.ТекущееЗначение;
		КонецЕсли;
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
			Или ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
			Или ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
			Структ.Вставить(ИмяСв, ЧтениеJSON.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат _ММ;
КонецФункции

Функция СоздатьОбъектыИзМассиваСтруктур(Мас) Экспорт
	_Об = Новый Массив;
	Для Каждого Струк Из Мас Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Сообщить("construct " + Струк._Тип + "/" + Струк._ИД);
		#КонецЕсли
		Объект = Струк._Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Имена = СтрСплит(Струк._Тип, ".");
			Если Имена[0] = "Справочник" Тогда
				ЭтоГруппа = Ложь;
				Струк.Свойство("ЭтоГруппа", ЭтоГруппа);
				Если ЭтоГруппа = Неопределено Тогда
					ЭтоГруппа = Ложь;
				КонецЕсли;
				Если ЭтоГруппа Тогда
					Объект = Справочники[Имена[1]].СоздатьГруппу();
				Иначе
					Объект = Справочники[Имена[1]].СоздатьЭлемент();
				КонецЕсли;
			КонецЕсли;
			Если Имена[0] = "Документ" Тогда
				Объект = Документы[Имена[1]].СоздатьДокумент();
			КонецЕсли;
			Объект.УстановитьСсылкуНового(Струк._Ссылка);
		КонецЕсли;
		Для Каждого СтрСтр Из Струк Цикл
			Если Лев(СтрСтр.Ключ, 1) = "_" Тогда
				Продолжить
			КонецЕсли;
			ТипЗн = Неопределено;
			Зн = Неопределено;
			Попытка
				Выполнить("ТипЗн = ТипЗнч(Объект."+ СтрСтр.Ключ +")");
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли
			КонецПопытки;
			Если ТипЗн <> Неопределено Тогда
				Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗн)
					Или Документы.ТипВсеСсылки().СодержитТип(ТипЗн) Тогда
					Зн = ДесереализоватьСсылку(СтрСтр.Значение);
				КонецЕсли;
				Если ТипЗн = Тип("Строка") Тогда
					Зн = Строка(СтрСтр.Значение);
				КонецЕсли;
				Если ТипЗн = Тип("Число") Тогда
					Попытка
						Зн = Число(СтрСтр.Значение)
					Исключение
						Зн = 0
					КонецПопытки;
				КонецЕсли;
				Если ТипЗн = Тип("Булево") Тогда
					Зн = (Строка(СтрСтр.Значение) = "Истина");
				КонецЕсли;
				Если ТипЗн = Тип("Дата") Тогда
					Попытка
						Зн = Дата(Строка(СтрСтр.Значение));
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			Попытка
				Выполнить("Объект." + СтрСтр.Ключ + " = Зн;");
			Исключение
			КонецПопытки;
		КонецЦикла;
		Попытка
			Объект.Записать();
		Исключение
			#Если Клиент Тогда
				Сообщить(ОписаниеОшибки());
			#КонецЕсли
		КонецПопытки;
		_Об.Добавить(Объект);
	КонецЦикла;
	Возврат _Об;
КонецФункции

Функция СоздатьСтруктуру_СправочникОрганизации(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("НаименованиеПолное", Неопределено);
	Стркт.Вставить("ГоловнаяОрганизация", Неопределено);
	Стркт.Вставить("РегистрационныйНомерТФОМС", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("РегистрационныйНомерПФР", Неопределено);
	Стркт.Вставить("ОбменКаталогПрограммыЭлектроннойПочты", Неопределено);
	Стркт.Вставить("СвидетельствоНаименованиеОргана", Неопределено);
	Стркт.Вставить("ОГРН", Неопределено);
	Стркт.Вставить("КодОрганаФСГС", Неопределено);
	Стркт.Вставить("КодОКОПФ", Неопределено);
	Стркт.Вставить("НаименованиеОКФС", Неопределено);
	Стркт.Вставить("РайонныйКоэффициент", Неопределено);
	Стркт.Вставить("РайонныйКоэффициентРФ", Неопределено);
	Стркт.Вставить("КодОКФС", Неопределено);
	Стркт.Вставить("ОбменКодАбонента", Неопределено);
	Стркт.Вставить("УчетнаяЗаписьОбмена", Неопределено);
	Стркт.Вставить("РегистрационныйНомерФСС", Неопределено);
	Стркт.Вставить("ИностраннаяОрганизация", Неопределено);
	Стркт.Вставить("ИНН", Неопределено);
	Стркт.Вставить("ИПРегистрационныйНомерТФОМС", Неопределено);
	Стркт.Вставить("КодОрганаПФР", Неопределено);
	Стркт.Вставить("Префикс", Неопределено);
	Стркт.Вставить("НаименованиеСокращенное", Неопределено);
	Стркт.Вставить("ОбменКаталогОтправкиДанныхОтчетности", Неопределено);
	Стркт.Вставить("ИПРегистрационныйНомерФСС", Неопределено);
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("НаименованиеТерриториальногоОрганаПФР", Неопределено);
	Стркт.Вставить("ТерриториальныеУсловияПФР", Неопределено);
	Стркт.Вставить("ЦифровойИндексОбособленногоПодразделения", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("СвидетельствоСерияНомер", Неопределено);
	Стркт.Вставить("КодПодчиненностиФСС", Неопределено);
	Стркт.Вставить("СвидетельствоДатаВыдачи", Неопределено);
	Стркт.Вставить("КодВСтранеРегистрации", Неопределено);
	Стркт.Вставить("НаименованиеОКВЭД", Неопределено);
	Стркт.Вставить("ИПРегистрационныйНомерПФР", Неопределено);
	Стркт.Вставить("КодОКВЭД", Неопределено);
	Стркт.Вставить("ВидОбменаСКонтролирующимиОрганами", Неопределено);
	Стркт.Вставить("НаименованиеТерриториальногоОрганаФСС", Неопределено);
	Стркт.Вставить("ВидСтавокЕСНиПФР", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("НаименованиеИнострОрганизации", Неопределено);
	Стркт.Вставить("КодОКОНХ", Неопределено);
	Стркт.Вставить("ДатаРегистрации", Неопределено);
	Стркт.Вставить("ИндивидуальныйПредприниматель", Неопределено);
	Стркт.Вставить("НаименованиеОКОПФ", Неопределено);
	Стркт.Вставить("ДополнительныйКодФСС", Неопределено);
	Стркт.Вставить("КПП", Неопределено);
	Стркт.Вставить("ОсновнойБанковскийСчет", Неопределено);
	Стркт.Вставить("КодПоОКПО", Неопределено);
	Стркт.Вставить("СвидетельствоКодОргана", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникОрганизации(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.Организации.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникОрганизации(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникВалюты(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("ПараметрыПрописиНаРусском", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("НаименованиеПолное", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникВалюты(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.Валюты.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникВалюты(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникНоменклатура(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("ВидНоменклатуры", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("Артикул", Неопределено);
	Стркт.Вставить("Услуга", Неопределено);
	Стркт.Вставить("Производитель", Неопределено);
	Стркт.Вставить("НоменклатурнаяГруппа", Неопределено);
	Стркт.Вставить("НаименованиеПолное", Неопределено);
	Стркт.Вставить("Импортер", Неопределено);
	Стркт.Вставить("НомерГТД", Неопределено);
	Стркт.Вставить("СтатьяЗатрат", Неопределено);
	Стркт.Вставить("СтранаПроисхождения", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("СтавкаНДС", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("Комментарий", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("Родитель", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникНоменклатура(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.Номенклатура.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникНоменклатура(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникВидыНоменклатуры(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникВидыНоменклатуры(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.ВидыНоменклатуры.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникВидыНоменклатуры(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникДолжности(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникДолжности(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.Должности.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникДолжности(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникПодразделенияОрганизаций(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("Владелец", Неопределено);
	Стркт.Вставить("КПП", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("РайонныйКоэффициент", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("РайонныйКоэффициентРФ", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("Родитель", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникПодразделенияОрганизаций(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.ПодразделенияОрганизаций.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникПодразделенияОрганизаций(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникСтатьиЗатрат(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("ВидРасходовНУ", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("Родитель", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникСтатьиЗатрат(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.СтатьиЗатрат.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникСтатьиЗатрат(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникРасходыБудущихПериодов(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("Сумма", Неопределено);
	Стркт.Вставить("ДатаНачалаСписания", Неопределено);
	Стркт.Вставить("ВидРБП", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("ДатаОкончанияСписания", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("ВидАктива", Неопределено);
	Стркт.Вставить("СпособПризнанияРасходов", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("Родитель", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникРасходыБудущихПериодов(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.РасходыБудущихПериодов.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникРасходыБудущихПериодов(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникНоменклатурныеГруппы(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("Родитель", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникНоменклатурныеГруппы(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.НоменклатурныеГруппы.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникНоменклатурныеГруппы(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникКонтрагенты(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("ГоловнойКонтрагент", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("НаименованиеПолное", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("КПП", Неопределено);
	Стркт.Вставить("ОсновнойБанковскийСчет", Неопределено);
	Стркт.Вставить("ОсновноеКонтактноеЛицо", Неопределено);
	Стркт.Вставить("ОбособленноеПодразделение", Неопределено);
	Стркт.Вставить("КодПоОКПО", Неопределено);
	Стркт.Вставить("ИНН", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("Комментарий", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("Родитель", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникКонтрагенты(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.Контрагенты.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникКонтрагенты(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникКонтактныеЛица(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("Описание", Неопределено);
	Стркт.Вставить("Имя", Неопределено);
	Стркт.Вставить("Фамилия", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("ДатаРождения", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("Отчество", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникКонтактныеЛица(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.КонтактныеЛица.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникКонтактныеЛица(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникБанковскиеСчета(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("Владелец", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("ДатаЗакрытия", Неопределено);
	Стркт.Вставить("СуммаБезКопеек", Неопределено);
	Стркт.Вставить("ДатаОткрытия", Неопределено);
	Стркт.Вставить("ВидСчета", Неопределено);
	Стркт.Вставить("НомерИДатаРазрешения", Неопределено);
	Стркт.Вставить("БанкДляРасчетов", Неопределено);
	Стркт.Вставить("МесяцПрописью", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("Банк", Неопределено);
	Стркт.Вставить("НомерСчета", Неопределено);
	Стркт.Вставить("ВалютаДенежныхСредств", Неопределено);
	Стркт.Вставить("ТекстКорреспондента", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("ТекстНазначения", Неопределено);
	Стркт.Вставить("ГосударственныйКонтракт", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникБанковскиеСчета(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.БанковскиеСчета.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникБанковскиеСчета(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_СправочникСтатьиДвиженияДенежныхСредств(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Наименование", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("ЭтоГруппа", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("ВидДвиженияДенежныхСредств", Неопределено);
	Стркт.Вставить("Код", Неопределено);
	Стркт.Вставить("Родитель", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция ВыгрузитьВСтруктуры_СправочникСтатьиДвиженияДенежныхСредств(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Справочники.СтатьиДвиженияДенежныхСредств.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_СправочникСтатьиДвиженияДенежныхСредств(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_ДокументРеализацияТоваровУслуг(Объект = Неопределено) Экспорт
	Стркт = Новый Структура;
	Стркт.Вставить("Контрагент", Неопределено);
	Стркт.Вставить("БанковскийСчетОрганизации", Неопределено);
	Стркт.Вставить("КратностьВзаиморасчетов", Неопределено);
	Стркт.Вставить("ВидОперации", Неопределено);
	Стркт.Вставить("ВалютаДокумента", Неопределено);
	Стркт.Вставить("Ответственный", Неопределено);
	Стркт.Вставить("СчетУчетаРасчетовПоТаре", Неопределено);
	Стркт.Вставить("ДоверенностьВыдана", Неопределено);
	Стркт.Вставить("ДоверенностьЧерезКого", Неопределено);
	Стркт.Вставить("Склад", Неопределено);
	Стркт.Вставить("Организация", Неопределено);
	Стркт.Вставить("_Тип", Неопределено);
	Стркт.Вставить("АдресДоставки", Неопределено);
	Стркт.Вставить("СчетУчетаРасчетовПоАвансам", Неопределено);
	Стркт.Вставить("ГлавныйБухгалтер", Неопределено);
	Стркт.Вставить("_ИД", Неопределено);
	Стркт.Вставить("Комментарий", Неопределено);
	Стркт.Вставить("СуммаДокумента", Неопределено);
	Стркт.Вставить("ТипЦен", Неопределено);
	Стркт.Вставить("Водитель", Неопределено);
	Стркт.Вставить("ДоговорКонтрагента", Неопределено);
	Стркт.Вставить("Грузоотправитель", Неопределено);
	Стркт.Вставить("Грузополучатель", Неопределено);
	Стркт.Вставить("КурсВзаиморасчетов", Неопределено);
	Стркт.Вставить("ОтпускПроизвел", Неопределено);
	Стркт.Вставить("СуммаВключаетНДС", Неопределено);
	Стркт.Вставить("СчетУчетаРасчетовСКонтрагентом", Неопределено);
	Стркт.Вставить("Перевозчик", Неопределено);
	Стркт.Вставить("ДоверенностьНомер", Неопределено);
	Стркт.Вставить("_Ссылка", Неопределено);
	Стркт.Вставить("ДоверенностьДата", Неопределено);
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект));
		#КонецЕсли
		ЗаполнитьЗначенияСвойств(Стркт, Объект);
		Стркт._ИД = Строка(Объект.УникальныйИдентификатор());
		Стркт._Тип = Строка(Объект.Метаданные().ПолноеИмя());
		Стркт._Ссылка = СериализоватьСсылку(Объект);
	КонецЕсли;
	Возврат Стркт;
КонецФункции

Функция СоздатьСтруктуру_ДокументРеализацияТоваровУслуг_ТЧ_Услуги(Объект = Неопределено) Экспорт
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект) + "ДокументРеализацияТоваровУслуг_ТЧ_Услуги");
		#КонецЕсли
		_Рез = Новый Массив;
		Для Каждого СтрТаб Из Объект.Услуги Цикл
			Стркт = Новый Структура;
			Стркт.Вставить("Сумма", Неопределено);
			Стркт.Вставить("Цена", Неопределено);
			Стркт.Вставить("Количество", Неопределено);
			Стркт.Вставить("СтавкаНДС", Неопределено);
			Стркт.Вставить("Содержание", Неопределено);
			Стркт.Вставить("Номенклатура", Неопределено);
			Стркт.Вставить("_Имя", Неопределено);
			Стркт.Вставить("_Владелец", Неопределено);
			Стркт.Вставить("СуммаНДС", Неопределено);
			Стркт.Вставить("_Ссылка", Неопределено);
			Стркт.Вставить("_Н", Неопределено);
			ЗаполнитьЗначенияСвойств(Стркт, СтрТаб);
			Стркт._Владелец = СериализоватьСсылку(Объект.Ссылка);
			Стркт._Н = _ПрЗнч(СтрТаб.НомерСтроки);
			Стркт._Ссылка = СериализоватьСсылку(СтрТаб);
			Стркт._Имя = "ДокументРеализацияТоваровУслуг_ТЧ_Услуги";
			_Рез.Добавить(Стркт);
		КонецЦикла;
	КонецЕсли;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_ДокументРеализацияТоваровУслуг_ТЧ_Товары(Объект = Неопределено) Экспорт
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект) + "ДокументРеализацияТоваровУслуг_ТЧ_Товары");
		#КонецЕсли
		_Рез = Новый Массив;
		Для Каждого СтрТаб Из Объект.Товары Цикл
			Стркт = Новый Структура;
			Стркт.Вставить("Сумма", Неопределено);
			Стркт.Вставить("Количество", Неопределено);
			Стркт.Вставить("_Владелец", Неопределено);
			Стркт.Вставить("СуммаНДС", Неопределено);
			Стркт.Вставить("ЕдиницаИзмерения", Неопределено);
			Стркт.Вставить("КоличествоМест", Неопределено);
			Стркт.Вставить("Цена", Неопределено);
			Стркт.Вставить("СтавкаНДС", Неопределено);
			Стркт.Вставить("Номенклатура", Неопределено);
			Стркт.Вставить("_Имя", Неопределено);
			Стркт.Вставить("Коэффициент", Неопределено);
			Стркт.Вставить("_Ссылка", Неопределено);
			Стркт.Вставить("_Н", Неопределено);
			ЗаполнитьЗначенияСвойств(Стркт, СтрТаб);
			Стркт._Владелец = СериализоватьСсылку(Объект.Ссылка);
			Стркт._Н = _ПрЗнч(СтрТаб.НомерСтроки);
			Стркт._Ссылка = СериализоватьСсылку(СтрТаб);
			Стркт._Имя = "ДокументРеализацияТоваровУслуг_ТЧ_Товары";
			_Рез.Добавить(Стркт);
		КонецЦикла;
	КонецЕсли;
	Возврат _Рез;
КонецФункции

Функция СоздатьСтруктуру_ДокументРеализацияТоваровУслуг_ТЧ_ВозвратнаяТара(Объект = Неопределено) Экспорт
	Если Объект <> Неопределено Тогда
		#Если Клиент Тогда
			Сообщить("struct " + Строка(Объект) + "ДокументРеализацияТоваровУслуг_ТЧ_ВозвратнаяТара");
		#КонецЕсли
		_Рез = Новый Массив;
		Для Каждого СтрТаб Из Объект.ВозвратнаяТара Цикл
			Стркт = Новый Структура;
			Стркт.Вставить("Цена", Неопределено);
			Стркт.Вставить("Сумма", Неопределено);
			Стркт.Вставить("Количество", Неопределено);
			Стркт.Вставить("Номенклатура", Неопределено);
			Стркт.Вставить("_Имя", Неопределено);
			Стркт.Вставить("_Владелец", Неопределено);
			Стркт.Вставить("_Ссылка", Неопределено);
			Стркт.Вставить("_Н", Неопределено);
			ЗаполнитьЗначенияСвойств(Стркт, СтрТаб);
			Стркт._Владелец = СериализоватьСсылку(Объект.Ссылка);
			Стркт._Н = _ПрЗнч(СтрТаб.НомерСтроки);
			Стркт._Ссылка = СериализоватьСсылку(СтрТаб);
			Стркт._Имя = "ДокументРеализацияТоваровУслуг_ТЧ_ВозвратнаяТара";
			_Рез.Добавить(Стркт);
		КонецЦикла;
	КонецЕсли;
	Возврат _Рез;
КонецФункции

Функция ВыгрузитьВСтруктуры_ДокументРеализацияТоваровУслуг(Отбор = Неопределено) Экспорт
	_Рез = Новый Массив;
	Выборка = Документы.РеализацияТоваровУслуг.Выбрать(,,);
	КД = 0;
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Сообщить("struct_unload " + Строка(Выборка.Ссылка));
		#КонецЕсли
		Если Найти(Строка(ТипЗнч(Выборка.Ссылка)), "Документ") <> 0 Тогда
			Если КД > 30 Тогда
				Прервать;
			Иначе
				КД = КД + 1;
			КонецЕсли;
		КонецЕсли;
		Стркт = СоздатьСтруктуру_ДокументРеализацияТоваровУслуг(Выборка.Ссылка);
		_Рез.Добавить(Стркт);
		Для Каждого СтрСтр Из СоздатьСтруктуру_ДокументРеализацияТоваровУслуг_ТЧ_Услуги(Выборка.Ссылка) Цикл
			_Рез.Добавить(СтрСтр);
		КонецЦикла;
		Для Каждого СтрСтр Из СоздатьСтруктуру_ДокументРеализацияТоваровУслуг_ТЧ_Товары(Выборка.Ссылка) Цикл
			_Рез.Добавить(СтрСтр);
		КонецЦикла;
		Для Каждого СтрСтр Из СоздатьСтруктуру_ДокументРеализацияТоваровУслуг_ТЧ_ВозвратнаяТара(Выборка.Ссылка) Цикл
			_Рез.Добавить(СтрСтр);
		КонецЦикла;
	КонецЦикла;
	Возврат _Рез;
КонецФункции

Функция Выгрузить() Экспорт
	Зп = Новый ЗаписьJSON;
	Зп.УстановитьСтроку();
	_ММ = Новый Массив;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникОрганизации() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникВалюты() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникНоменклатура() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникВидыНоменклатуры() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникДолжности() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникПодразделенияОрганизаций() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникСтатьиЗатрат() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникРасходыБудущихПериодов() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникНоменклатурныеГруппы() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникКонтрагенты() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникКонтактныеЛица() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникБанковскиеСчета() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_СправочникСтатьиДвиженияДенежныхСредств() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	Для Каждого Эл Из ВыгрузитьВСтруктуры_ДокументРеализацияТоваровУслуг() Цикл
		_ММ.Добавить(Эл);
	КонецЦикла;
	СериализоватьМассивСтруктур(Зп, _ММ);
	Возврат Зп.Закрыть();
КонецФункции

Функция Загрузить(Текст) Экспорт
	Чт = Новый ЧтениеJSON;
	Чт.УстановитьСтроку(Текст);
	_ММ = ДесереализоватьМассивСтруктур(Чт);
	_Об = СоздатьОбъектыИзМассиваСтруктур(_ММ);
	#Если Клиент Тогда
		Сообщить("Загружено объектов: " + Строка(_Об.Количество()));
	#КонецЕсли
КонецФункции
